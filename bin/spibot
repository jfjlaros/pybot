#!/usr/bin/python

import re
import irclib, basicbot

def IsFriend(nick):
	if not getattr(nick, "mask", None):
		return 0

	try:
		for line in open('friends').readlines():
			words=re.split("\s",line.rstrip())
			if len(words)==0:
				continue
			
			if re.search("^%s$" % words[0], nick.mask):
				if len(words)==2:
					return int(words[1])
				return 1

	except IOError,x:
		print "Unable to open 'friends' file: ",x
	
	return 0



class SuikerPot(basicbot.BasicBot):
	PublicCommands	= { }

	def __init__(self, conffile="config"):
		super(SuikerPot, self).__init__(conffile)
		self.present={}


	def OnEndOfNames(self, connection, event):
		self.server.privmsg(event.arguments()[0],
				self.config["messages/startup"])


	def OnPubMsg(self, connection, event):
		super(SuikerPot,self).OnPubMsg(connection, event)

		msg=event.arguments()[0]
		channel=event.target()
		nick=self.people[irclib.nm_to_n(event.source())]

		print "%-10s: %s" % (nick.nick, msg)

		try:
			args=msg[1:].split(None, 1)
			(cmd,args)=(args[0], args[1:])
			if args:
				args=args[0]
			func="PubCmd"+cmd.capitalize()
			if msg[0]=='!' and hasattr(self, func):
				getattr(self, func)(channel, nick, args)
		except TypeError:
			pass
		except IndexError:
			pass


	def OnPrivMsg(self, connection, event):
		super(SuikerPot,self).OnPrivMsg(connection, event)

		try:
			msg=event.arguments()[0]
			args=msg[1:].split(None, 1)
			(cmd,args)=(args[0], args[1:])
			if args:
				args=args[0]
			func="PrivCmd"+cmd.capitalize()
			if msg[0]=='!' and hasattr(self, func):
				nick=self.people[irclib.nm_to_n(event.source())]
				getattr(self, func)(nick, args)
		except TypeError:
			pass
		except IndexError:
			pass


	def OnJoin(self, connection, event):
		super(SuikerPot,self).OnJoin(connection, event)

		nick=self.people[irclib.nm_to_n(event.source())]
		if nick.nick==self.connection.get_nickname():  # this is us!
			self.logger.info("We finished joining %s ourselves" 
					% event.target())
			return 

		if IsFriend(event.source()):
			self.logger.info("%s is a friend, giving ops" % nick)
			self.op(nick.nick)
		else:
			self.logger.info("%s is not a friend, giving voice and sending welcome message" % nick)
			self.voice(nick.nick)
			if self.CheckLimit():
				self.connection.notice(nick.nick, self.config["messages/welcome"])
	

	def PubCmdKoffie(self, channel, nick, args):
		if self.CheckLimit():
			self.server.ctcp("ACTION", channel,
					self.config["messages/koffie"] % nick.nick)
	

	def PubCmdKlant(self, channel, nick, args):
		if self.CheckLimit():
			self.server.privmsg(channel,
					self.config["messages/klant"])
	

	def PubCmdRoster(self, channel, nick, args):
		if self.CheckLimit() and IsFriend(nick):
			self.server.privmsg(channel, "Registered nicks:")
			for person in self.present.items():
				self.server.privmsg(channel, "  %s (%s)" % person)


	def PrivCmdSay(self, nick, args):
		if IsFriend(nick):
			try:
				(channel,msg)=args.split(None, 1)
				self.server.privmsg(self.config["IRC/channel"],
						msg)
			except ValueError:
				self.server.privmsg(nick.nick,
						"Not enough parameters")

	def PrivCmdPresent(self, nick, args):
		args=args.strip()
		if not args:
			self.server.privmsg(nick.nick,
					"Please provide a full name")
		else:
			self.present[nick.nick]=args
			self.server.privmsg(self.config["IRC/channel"],
					"Noted presence for %s (%s)" % (nick.nick, args))
		
	def PrivCmdDo(self, nick, args):
		if IsFriend(nick):
			try:
				(channel,msg)=args.split(None, 1)
				self.server.ctcp("ACTION", channel, msg)
			except ValueError:
				self.server.privmsg(nick.nick,
						"Not enough parameters")

	def PrivCmdOp(self, nick, args):
		if IsFriend(nick)>1:
			self.server.privmsg(nick.nick, "You will be opped")
			self.op(nick.nick)
		else:
			self.server.privmsg(nick.nick, "Sorry, I do not trust you.")


if __name__ == "__main__":
	bot=SuikerPot()
	bot.MainLoop()

